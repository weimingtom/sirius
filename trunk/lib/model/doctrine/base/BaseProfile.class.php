<?php

/**
 * BaseProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $owner_id
 * @property string $profile_name
 * @property string $screen_name
 * @property string $type
 * @property string $avatar_url
 * @property string $connect_data
 * @property User $User
 * @property Doctrine_Collection $threads
 * 
 * @method integer             getOwnerId()      Returns the current record's "owner_id" value
 * @method string              getProfileName()  Returns the current record's "profile_name" value
 * @method string              getScreenName()   Returns the current record's "screen_name" value
 * @method string              getType()         Returns the current record's "type" value
 * @method string              getAvatarUrl()    Returns the current record's "avatar_url" value
 * @method string              getConnectData()  Returns the current record's "connect_data" value
 * @method User                getUser()         Returns the current record's "User" value
 * @method Doctrine_Collection getThreads()      Returns the current record's "threads" collection
 * @method Profile             setOwnerId()      Sets the current record's "owner_id" value
 * @method Profile             setProfileName()  Sets the current record's "profile_name" value
 * @method Profile             setScreenName()   Sets the current record's "screen_name" value
 * @method Profile             setType()         Sets the current record's "type" value
 * @method Profile             setAvatarUrl()    Sets the current record's "avatar_url" value
 * @method Profile             setConnectData()  Sets the current record's "connect_data" value
 * @method Profile             setUser()         Sets the current record's "User" value
 * @method Profile             setThreads()      Sets the current record's "threads" collection
 * 
 * @package    Sirius
 * @subpackage model
 * @author     Cary Yang <getcary@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProfile extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('profile');
        $this->hasColumn('owner_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('profile_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('screen_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('avatar_url', 'string', 1023, array(
             'type' => 'string',
             'length' => '1023',
             ));
        $this->hasColumn('connect_data', 'string', 1023, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '1023',
             ));


        $this->index('owner_id_index', array(
             'fields' => 
             array(
              0 => 'owner_id',
             ),
             ));
        $this->index('fingerprint_index', array(
             'fields' => 
             array(
              0 => 'profile_name',
              1 => 'screen_name',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'owner_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Thread as threads', array(
             'local' => 'id',
             'foreign' => 'profile_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);

    $this->addListener(new ProfileInsertListener(array()), 'ProfileInsertListener');
    }
}